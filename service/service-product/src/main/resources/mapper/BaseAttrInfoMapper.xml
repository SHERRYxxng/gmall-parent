<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper SYSTEM "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--namespace 定义接口的全路径-->
<mapper namespace="sherry.taobao.gmall.product.mapper.BaseAttrInfoMapper">
    <!--
        resultMap：表示返回的映射结果集
        id ： 表示唯一标识
        type：表示返回结果集的数据类型
        autoMapping : 自动映射
    -->
    <resultMap id="baseAttrInfoMap" type="sherry.taobao.gmall.model.product.BaseAttrInfo" autoMapping="true">
        <!--id:表示主键 property：表示实体类的属性名 column：表示通过sql 执行以后查询出来的字段名-->
        <id property="id" column="id"></id>
        <!--result : 表示映射普通字段-->
        <!--<result property="" column=""></result>-->
        <!--mybatis 如何配置一对多-->
        <!--ofType : 返回的数据类型-->
        <collection property="attrValueList" ofType="sherry.taobao.gmall.model.product.BaseAttrValue" autoMapping="true">
            <!--如果有字段重复则起别名-->
            <id property="id" column="attr_value_id"></id>
        </collection>
    </resultMap>
    <!--id:表示方法名-->
    <select id="selectBaseAttrInfoList" resultMap="baseAttrInfoMap">
        SELECT
        bai.id,
        bai.attr_name,
        bai.category_id,
        bai.category_level,
        bav.id attr_value_id,
        bav.value_name,
        bav.attr_id
        FROM
        base_attr_info bai
        INNER JOIN base_attr_value bav ON bai.id = bav.attr_id
        <where>
            <if test="category1Id != null and category1Id != 0">
                or (bai.category_id = #{category1Id} and bai.category_level = 1)
            </if>
            <if test="category2Id != null and category2Id != 0">
                or (bai.category_id = #{category2Id} and bai.category_level = 2)
            </if>
            <if test="category3Id != null and category3Id != 0">
                or (bai.category_id = #{category3Id} and bai.category_level = 3)
            </if>
        </where>
        order by bai.category_level, bai.id
    </select>
    <!--
    根据skuId 获取平台属性数据
    -->
    <select id="selectAttrList"  resultMap="baseAttrInfoMap">
        select
            bai.id,
            bai.attr_name,
            bai.category_id,
            bai.category_level,
            bav.id attr_value_id,
            bav.value_name,
            bav.attr_id


        from base_attr_info bai
                 inner join base_attr_value bav
                            on bai.id=bav.attr_id
                 inner join sku_attr_value skav
                            on bav.id=skav.value_id
        where  skav.sku_id=#{skuId}


    </select>

<!--    SELECT sa.id ,sa.spu_id, sa.sale_attr_name,sa.base_sale_attr_id,-->
<!--    sv.id sale_attr_value_id,-->
<!--    sv.sale_attr_value_name,-->
<!--    skv.sku_id,-->
<!--    IF(skv.sku_id IS NULL,0,1)  is_checked-->
<!--    FROM spu_sale_attr sa-->
<!--    INNER JOIN spu_sale_attr_value  sv ON  sa.spu_id=sv.spu_id AND sa.base_sale_attr_id=sv.base_sale_attr_id-->
<!--    LEFT JOIN sku_sale_attr_value skv ON skv.sale_attr_value_id= sv.id AND skv.sku_id=#{skuId}-->
<!--    WHERE  sa.spu_id=#{spuId}-->
<!--    ORDER BY sv.base_sale_attr_id,sv.id-->
    <select id="selectBaseAttrInfoListBySkuId" resultMap="baseAttrInfoMap">
        SELECT
            bai.id,
            bai.attr_name,
            bai.category_id,
            bai.category_level,
            bav.id attr_value_id,
            bav.value_name,
            bav.attr_id
        FROM
            base_attr_info bai
                INNER JOIN base_attr_value bav ON bai.id = bav.attr_id
                INNER JOIN sku_attr_value sav ON sav.value_id = bav.id
        WHERE
            sav.sku_id = #{skuId}
    </select>

</mapper>
